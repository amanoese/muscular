const echoSdSlim = require('../src/echo-sd-slim.js')
const stringWidth = require('string-width');
const XRegExp = require('xregexp');

describe('echo-sd-slim',()=>{
  test('tate ÂçòË°å',async ()=>{
    expect(echoSdSlim.tate('„Åì„Çì„Å´„Å°„ÅØ'))
      .toBe('„Åì\n' +
            '„Çì\n' +
            '„Å´\n' +
            '„Å°\n' +
            '„ÅØ')
  })
  test('tate Ë§áÊï∞Ë°å',async ()=>{
    expect(echoSdSlim.tate('„Åì„Çì„Å´„Å°„ÅØ\n‰ªäÊó•„ÅØÊô¥„Çå„Åß„Åô„ÄÇ'))
      .toBe('‰ªä„Åì\n' +
            'Êó•„Çì\n' +
            '„ÅØ„Å´\n' +
            'Êô¥„Å°\n' +
            '„Çå„ÅØ\n' +
            '„Åß„ÄÄ\n' +
            '„Åô„ÄÄ\n' +
            'Ô∏í„ÄÄ')
  })
  test('tate ÂçäËßíÊñáÂ≠óÂÖ•„Çä',async ()=>{
    expect(echoSdSlim.tate('unko\nÔΩ≥ÔæùÔΩ∫„Åß„Åô„ÄÇ'))
      .toBe('ÔΩ≥ u \n' +
            'Ôæù n \n' +
            'ÔΩ∫ k \n' +
            '„Åßo \n' +
            '„Åô„ÄÄ\n' +
            'Ô∏í„ÄÄ')

  })
  test('XRegExp ÁµµÊñáÂ≠ó„ÅÆÁ¢∫Ë™ç',async ()=>{
    XRegExp.install('astral');

    expect('abc„Ç¢„Ç§„Ç¶üç£üç∫üçö'.replace(XRegExp('.','ug'),'$&-'))
      .toBe('a-b-c-„Ç¢-„Ç§-„Ç¶-üç£-üç∫-üçö-')
  })
  test('stringWidth ÁµµÊñáÂ≠ó„ÅÆÁ¢∫Ë™ç',async ()=>{
    expect(stringWidth('üç£üç∫üçö')).toBe(6)
  })
  test('tate ÁµµÊñáÂ≠ó',async ()=>{
    expect(echoSdSlim.tate('üç£üç∫üçö'))
      .toBe('üç£\n' +
            'üç∫\n' +
            'üçö')

  })
  test('echo-sd',async ()=>{
    expect(echoSdSlim.print('„ÅÜ„Çì„Åì'))
    .toBe('Ôºø‰∫∫‰∫∫‰∫∫‰∫∫Ôºø\n' +
          'Ôºû „ÅÜ„Çì„Åì Ôºú\n' +
          'Ôø£Y^Y^Y^Y^Ôø£\n')
  })
  test('echo-sd ÂçäËßí',async ()=>{
    expect(echoSdSlim.print('üí©@'))
    .toBe('Ôºø‰∫∫‰∫∫‰∫∫Ôºø\n' +
          'Ôºû üí©@  Ôºú\n' +
          'Ôø£Y^Y^Y^Ôø£\n')
  })
  test('echo-sd tate',async ()=>{
    expect(echoSdSlim.tatePrint('„ÅÜ„Çì„ÅìÔºÅ'))
    .toBe('Ôºø‰∫∫‰∫∫Ôºø\n' +
          'Ôºû „ÅÜ Ôºú\n' +
          'Ôºû „Çì Ôºú\n' +
          'Ôºû „Åì Ôºú\n' +
          'Ôºû ÔºÅ Ôºú\n' +
          'Ôø£Y^Y^Ôø£\n')
  })
})
